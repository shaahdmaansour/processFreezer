xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2024 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".

# Process Freezer Implementation in xv6

This project extends the xv6 operating system with a process freezing mechanism that allows temporarily suspending and resuming processes. This feature is useful for process management, debugging, and system resource control.

## Features

- **Process Freezing**: Temporarily suspend a running process
- **Process Unfreezing**: Resume a previously frozen process
- **State Preservation**: Maintains process state and resources while frozen
- **Safe Process Management**: Prevents freezing of zombie or unused processes

## Implementation Details

### System Calls

Two new system calls have been added:

1. `freeze(pid)`: Freezes a process with the specified PID
   - Returns 0 on success, -1 on failure
   - Cannot freeze zombie or unused processes
   - Cannot freeze already frozen processes

2. `unfreeze(pid)`: Unfreezes a previously frozen process
   - Returns 0 on success, -1 on failure
   - Automatically wakes up sleeping processes when unfrozen

### Process Structure

The process structure (`struct proc`) has been extended with:
- `frozen`: A flag indicating whether the process is frozen (1) or not (0)

### Testing

A test program (`freezerTest.c`) is included to demonstrate the functionality:
- Creates a child process that continuously prints its status
- Freezes the child process
- Keeps it frozen for a period
- Unfreezes the process
- Terminates the child process

## Building and Running

1. Build xv6:
```bash
make qemu
```

2. Run the test program:
```bash
freezerTest
```

## Usage Example

```c
// Freeze a process
int result = freeze(pid);
if(result < 0) {
    // Handle error
}

// Unfreeze a process
result = unfreeze(pid);
if(result < 0) {
    // Handle error
}
```

## Implementation Notes

- The freezing mechanism is implemented at the kernel level
- Frozen processes maintain their state and resources
- The system ensures safe process state transitions
- Proper locking mechanisms are used to prevent race conditions

## Limitations

- Cannot freeze zombie or unused processes
- Cannot freeze already frozen processes
- Process must exist and be in a valid state for freezing/unfreezing

## Future Improvements

Potential areas for enhancement:
- Add support for freezing process groups
- Implement timeout mechanism for frozen processes
- Add system-wide freeze/unfreeze capabilities
- Enhance error reporting and status monitoring
